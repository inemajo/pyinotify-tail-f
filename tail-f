#!/usr/bin/python
##
## python inotify example, reproduce the "tail -F -n 0" command mechanism
##
## You may use it as a program:
## Usage: ./tail-f /path/to/file [real]
##      -if real opt is set the tail programm is call in a pipe
##
## Or as a pythonlib see the __main__ example.
##
## @Author: Inemajo <inemajo@fsfe.org>
## Copyright: public domain, there is no copyright

import os
import sys
import pyinotify

BUFSIZE = 4096
    
class inoproc(pyinotify.ProcessEvent):

    def __init__(self, file_path):
        index = file_path.rfind('/')
        if index == -1:
            self.__file_name = file_path
            self.__file_dir = '.'
        else:
            self.__file_name = file_path[index+1:]
            self.__file_dir = file_path[:index]

        self.__filename = self.__file_dir + '/'  + self.__file_name
        self.stream = ''
        self.open_file()
        self.__nbr = os.stat(self.__filename).st_size
        self.__buff = ''

    def open_file(self):
        self.__filefd = os.open(self.__filename, os.O_RDONLY)
        self.__nbr = 0

    def close_file(self):
        os.close(self.__filefd)
        
    def getfile_fd(self):
        return (self.__filefd)

    def __read_file(self):
        global BUFSIZE

        stats = os.stat(self.__filename)

        ##
        ## FIXME : when file is truncated and new data is equal or bigger than
        ##         current seek impossible to know if file is truncated
        if stats.st_size == self.__nbr:
            return
        elif stats.st_size < self.__nbr: # file truncated
            self.close_file()
            self.open_file()

        os.lseek(self.__filefd, self.__nbr, os.SEEK_SET)
        buff = os.read(self.__filefd, BUFSIZE)
        self.__nbr += len(buff)

        self.__buff += buff
        index = self.__buff.rfind('\n')
        if index  == -1:
            return
        self.stream += self.__buff[:index+1]
        self.__buff = self.__buff[index+1:]
        return

    def getdir(self):
        return (self.__file_dir)

# --- Inotify bindings ----

    def process_IN_MODIFY(self, event):
        if self.__file_name != event.name or self.__file_dir != event.path:
            return
        self.__read_file()
    
    def process_IN_MOVE_SELF(self, event):
        # "The file moved! Continuing to read from that, until a new one is created.."
        return

    def process_IN_CREATE(self, event):
        if self.__file_name != event.name or self.__file_dir != event.path:
            return
        self.close_file()
        self.open_file()
        self.__read_file()
        return

class   tail(pyinotify.Notifier):

    def __init__(self, file_path, real_tail = False, tail_stderr = sys.stderr):

        if real_tail == True:
            self.__real_tail = True
            self.__create_tail(file_path, tail_stderr)
        else:
            self.__real_tail = False
            dirmask = pyinotify.IN_MODIFY | pyinotify.IN_MOVE_SELF | pyinotify.IN_CREATE

            wm = pyinotify.WatchManager()
            self.ip = inoproc(file_path)
            wm.add_watch(self.ip.getdir(), dirmask)
            pyinotify.Notifier.__init__(self, wm, self.ip)

    def __create_tail(self, filename, tail_stderr):
        from subprocess import Popen, PIPE

        if type(tail_stderr) == str:
            p_stderr = open(tail_stderr, 'w')
        elif type(tail_stderr) == file:
            p_stderr = tail_stderr
        elif type(tail_stderr) == type(None):
            p_stderr = open("/dev/null", 'w')
        else:
            sys.stderr.write("unknow \"tail_stderr\" type force exit...")
            sys.exit(1)
        self.__process = Popen(['tail', '-F', '-n', '0', filename], stdout=PIPE, stderr=p_stderr)
        return

    def getfile(self):
        if self.__real_tail:
            return self.__process.stdout
        return self.ip.getfile_fd()

    def close(self):
        if self.__real_tail == True:
            self.__process.terminate()
        else:
            self.ip.close_file()

    def __wait_events(self):
        if not self.check_events():
            return

        self.read_events()
        self.process_events()

    def read_stream(self):
        if self.__real_tail == True:
            return self.__process.stdout.readline()
        
        self.__wait_events()
        result = self.ip.stream
        self.ip.stream = ''
        return result

    def stop(self):
        if self.__real_tail == False:
            pyinotify.Notifier.stop(self)        

if __name__ == "__main__":
    import sys
    import select
    import signal

    def p(notifier):
        os.write(1, notifier.read_stream())

    def __signal_handler(sig, frame, notifier):
        notifier.ip.close_file()
        notifier.ip.open_file()

    signal.signal(signal.SIGUSR1, lambda s, f : __signal_handler(s, f, notifier))
    
    if len(sys.argv) == 3 and sys.argv[2] == 'real':
        real = True # start with a pipe to real tail
    else:
        real = False # start class instance

    # if real is not set __init__ function set to False
    # if tail_stderr = str -> __init__ function open the file
    #                = type(None) -> __init__ function open /dev/null block device
    #                = file -> __init__ function dup2 file python type for tail
    notifier = tail(sys.argv[1], real_tail = real, tail_stderr = None)
    while True:
        try:
            select.select([notifier.getfile()], [], [])
            p(notifier)
        except KeyboardInterrupt:
            break

    notifier.stop()
    sys.exit(0)
